using Content.Client.UserInterface.ControlExtensions;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Timing;

namespace Content.Client._RMC14.Mortar;

[GenerateTypedNameReferences]
public sealed partial class MortarWindow : DefaultWindow
{
    public readonly FloatSpinBox TargetX;
    public readonly FloatSpinBox TargetY;
    public readonly FloatSpinBox DialX;
    public readonly FloatSpinBox DialY;
    private LineEdit? _focus;
    private int _delayed;

    public MortarWindow()
    {
        RobustXamlLoader.Load(this);

        static FloatSpinBox CreateSpinBox(BoxContainer container)
        {
            var spinBox = new FloatSpinBox(1, 0) { MinWidth = 130 };
            container.AddChild(spinBox);
            return spinBox;
        }

        static LineEdit? SpinBoxGetLineEdit(FloatSpinBox box)
        {
            foreach (var edit in box.GetControlOfType<LineEdit>())
            {
                return edit;
            }

            return null;
        }

        void SpinBoxTab(FloatSpinBox from, FloatSpinBox to)
        {
            if (SpinBoxGetLineEdit(from) is not { } fromEdit ||
                SpinBoxGetLineEdit(to) is not { } toEdit)
            {
                return;
            }

            fromEdit.OnKeyBindDown += args =>
            {
                if (args.Function == EngineKeyFunctions.GuiTabNavigateNext)
                    toEdit.GrabKeyboardFocus();
            };

            toEdit.OnKeyBindDown += args =>
            {
                if (args.Function == EngineKeyFunctions.GuiTabNavigatePrev)
                    fromEdit.GrabKeyboardFocus();
            };

            fromEdit.OnFocusEnter += _ =>
            {
                _focus = fromEdit;
                _delayed = 0;
            };
        }

        TargetX = CreateSpinBox(TargetXContainer);
        TargetY = CreateSpinBox(TargetYContainer);
        DialX = CreateSpinBox(DialXContainer);
        DialY = CreateSpinBox(DialYContainer);

        SpinBoxTab(TargetX, TargetY);
        SpinBoxTab(TargetY, DialX);
        SpinBoxTab(DialX, DialY);
        SpinBoxTab(DialY, TargetX);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_focus == null)
            return;

        if (_delayed < 6)
        {
            _delayed++;
            return;
        }

        _focus.CursorPosition = _focus.Text.Length;
        _focus.SelectionStart = 0;
        _focus = null;
        _delayed = 0;
    }
}
