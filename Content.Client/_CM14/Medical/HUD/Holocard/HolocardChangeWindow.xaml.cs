using Content.Shared._CM14.Medical;
using Content.Shared._CM14.Medical.Systems;
using Content.Shared.Chemistry.Reagent;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._CM14.Medical.HUD.Holocard;

/// <summary>
///     A window that allows you to change the holocard of the associated entity
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class HolocardChangeWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly HolocardSystem _holocard = default!;

    private readonly HolocardChangeBoundUserInterface _owner;

    public HolocardChangeWindow(HolocardChangeBoundUserInterface owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _owner = owner;

        Title = Loc.GetString("ui-holocard-change-title");

        HolocardStateList.OnItemSelected += OnHolocardStateSelect;
        HolocardStateList.OnItemDeselected += OnHolocardStateDeselect;

        SearchBar.OnTextChanged += (_) => UpdateHolocardStateList(SearchBar.Text);

        UpdateHolocardStateList();
    }

    private void OnHolocardStateSelect(ItemList.ItemListSelectedEventArgs obj)
    {
        var newSelectedHolocard = (HolocardStaus?) obj.ItemList[obj.ItemIndex].Metadata!;

        if (newSelectedHolocard is HolocardStaus newHolocard)
        {
            _owner.ChangeHolocard(newHolocard);
            _owner.Close();
        };
    }

    private void OnHolocardStateDeselect(ItemList.ItemListDeselectedEventArgs obj)
    {

    }

    private void UpdateHolocardStateList(string? filter = null)
    {
        HolocardStateList.Clear();

        foreach (HolocardStaus status in Enum.GetValues(typeof(HolocardStaus)))
        {
            if (!_holocard.TryGetHolocardName(status, out string? holocardName))
            {
                continue;
            }

            if (!string.IsNullOrEmpty(filter) &&
            !holocardName.ToLowerInvariant().Contains(filter.Trim().ToLowerInvariant()))
            {
                continue;
            }

            ItemList.Item listEntry = new(HolocardStateList)
            {
                Text = holocardName,
                Metadata = status
            };
            HolocardStateList.Add(listEntry);
        }
    }

}
