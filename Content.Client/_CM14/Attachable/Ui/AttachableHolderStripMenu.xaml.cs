using System.Numerics;
using Content.Client.Message;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared._CM14.Attachable;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BoxContainer;


namespace Content.Client._CM14.Attachable.Ui;

[GenerateTypedNameReferences]
public sealed partial class AttachableHolderStripMenu : FancyWindow//Control
{
    private readonly AttachableHolderStripBoundUserInterface boundUI;
    private readonly Dictionary<string, AttachableSlotControl> _attachableSlotControls;
    
    
    public AttachableHolderStripMenu(AttachableHolderStripBoundUserInterface boundUI)
    {
        this.boundUI = boundUI;
        _attachableSlotControls = new Dictionary<string, AttachableSlotControl>();
        
        OnClose += () => { boundUI.Close(); };
        
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }
    
    
    public void UpdateMenu(Dictionary<string, string?> attachableSlots)
    {
        foreach(string slotID in attachableSlots.Keys)
        {
            if(!_attachableSlotControls.ContainsKey(slotID))
                AddSlotControl(slotID);
                
            _attachableSlotControls[slotID].Update(attachableSlots[slotID]);
        }
    }
    
    private void AddSlotControl(string slotID, string? attachableName = null)
    {
        AttachableSlotControl slotControl = new AttachableSlotControl(boundUI, slotID, attachableName);
        AttachablesContainer.AddChild(slotControl);
        _attachableSlotControls.Add(slotID, slotControl);
    }
    
    
    private sealed class AttachableSlotControl : Control
    {
        private string slotID;
        public readonly Button AttachableButton;
        
        
        public AttachableSlotControl(AttachableHolderStripBoundUserInterface boundUI, string slotID, string? attachableName)
        {
            this.slotID = slotID;
            
            Label slotLabel = new Label
            {
                Text = Loc.GetString(slotID) + ':',
                HorizontalAlignment = HAlignment.Left
            };
            
            AttachableButton = new Button
            {
                Text = Loc.GetString("cm-attachable-holder-strip-ui-empty-slot"),
                HorizontalExpand = true,
                HorizontalAlignment = HAlignment.Right,
                StyleClasses = { StyleBase.ButtonOpenRight }
            };
            
            BoxContainer hBox = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                Children =
                {
                    new Control {MinSize = new Vector2(5, 0)},
                    slotLabel,
                    new Control {MinSize = new Vector2(5, 0)},
                    AttachableButton
                }
            };
            
            AttachableButton.OnPressed += args => { boundUI.SendMessage(new AttachableHolderDetachMessage(slotID)); };
            AddChild(hBox);
        }
        
        
        public void Update(string? attachableName)
        {
            if(attachableName == null)
            {
                AttachableButton.Text = Loc.GetString("cm-attachable-holder-strip-ui-empty-slot");
                AttachableButton.Disabled = true;
                return;
            }
            
            AttachableButton.Text = attachableName;
            AttachableButton.Disabled = false;
        }
    }
}
